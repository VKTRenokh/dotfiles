clear
l
sls
ls
clear
workspace
ls
cd .config
ls
claer
ls
clear
cd nushell
ls
$nu.env-path
ls
clear
source $nu.env-path
ls
$nu.config-path
clera
claer
clear
ls
50 / 500
50 / 50
(http get https://api.chucknorris.io/jokes/random).valueE
доавлыа
~/.local
ls
cd bin
ls
config nu
help http get
http get https://github.com
ls | where type == file
ps | where cpu > 0 | sort-by cpu | reverse
parse
ls
cd dotfiles
ls
df -h | str replace "Mounted on" Mounted_On | detect columnsE
cargo search shells --limit 10 | lines | parse "{crate_name} = {version} #{description}" | str trimE
fihs
fish
sudo pacman -S fish
fish --command
fish --command "complete"
ls
clera
clear
fastfetch
ls
workspace
ls
claer
ls
clear
zo
z
zoxide
sudo pacman -S zoxide
paru -S zoxide
ls
z
zoxide
ls
clear
cd /mnt
ls
cd sda
ls
cd sda1/
ls
cd workspace
ls
cd vktrenokh-angular2024q3/
ls
git add
ls
cd ..l
cd ..
sl
cd ~
ls
cd .local/share
ls
cd ..
cat bin/tmux-sessionizer
ls
cd bin
ls
nvim ts
./ts
ls
chmod +x ts
./ts
fdjkfdsjf
ts safd
ls
nvim ts
;s
ls
rm -rf ts
ls
clear
cd .config/kitty
l
ls
alias
alias hello="nvim"
alias hello = "nvim"
alias hello = nvim
hello
clear
clera
clear
kls
ls
carapace
sudo pacman -S carapace
overlay
overlay list
overlay new
overlay --help
ls
v
workspace
ls
cd =
cd -
clear
ls
menu name: ide_completion_menu
menunext
> echo $nu.keybinding-pathE/home/sophia/.config/nu/keybindings.ymlE
echo $nu.keybinding-pathE/home/sophia/.config/nu/keybindings.yml
echo $nu.keybinding-pathE
echo $nu.
completion_menu
keybindsp
keybindings
keybindings list
sdkjfsdlkfj
jkdjfdsk
uuu
ls
keybindings list
nvim config.nu
ls
b
v
kdsfjlasdfjlk
keybindings list 
ls
cllear
clear
ls
nvim
v
ksdafasdjklj
config reload
config
config nu
ls
clear
ls
clear
ls
cleasr
clear
ls
clear
claer
neofetch
fastfetch
clear
ls
tmux
chsh -s /usr/bin/nu
ls
tmux
ls
clear
ls
git clone https://github.com/nushell/nu_scripts.git
cp nu_scripts/themes/ ~/.config/nu
cp nu_scripts/themes/ ~/.config/nu -r
ls
cd .config/nu
ls
ls nu-themes/
source nu-themes/tokyo-moon.nu
ls
clear
fastfetch
v
ls
source
config nu
ls
kitten theme
ls
nu config
config
ls
config kitty
ls
cd ..
ls
cd .confgi
cd .config
ls
cd kitty
ls
kitten theme
ls
clear
worksace
workspace
ls
cd .config
ls
cd kitty
b
ls
cd .config/nu
ls
cd nu-themes
ls
clear
ls
print
ls
nu config
ls
clear
parsyu
ls
clear
ls
clear
ls
sudo mount /dev/sda1 /mnt/sda1/
ls
clear
ls
cd youtube
cd youtube
ls
ls
ng serve
config nu
ng
source
source %
$nu.config-path
source $nu.config-path
ls
ng
b
sudo dinitctl start bluetoothd && rfkill unblock all
sudo dinitctl start bluetoothd and rfkill unblock all
sudo dinitctl start bluetoothd
rfkill unblock all
ls
clera
ls
cd .config
ls
cd nu
ls
v nu-themes
ls
nvim nu-themes
source nu-themes/tokyo-night.nu
source nu-themes/tokyo-storm.nu
ls
cd .config/nu
ls
tks
v
exit
cd .config/nu
ls
config nu
ls
cd .config/kitty
ls
lsl
ls
v
cd .config/kitty
ls
clear
ls
exit
tmux
ls
jls
ls
clear
ls
l
ls
cles
ls
clear
neofethc
neofetch
ls
config nu
ls
source .config/nu/config.nu
source .config/nushell/config.nu
ls
cd .config/nushell
ls
cd .
cd ..
ls
cd nu
ls
$nu.config-path
nvim nushell
ls
cd .config/nushell
ls
$nu.config-path
$nu.config-path
uwufetch
pfetch
paru -S pfetch
ls
pfetch
ls
pfetch
pfetch --help
pfetch
printf # std.nu, `used` to load all standard library componentsEEexport module assert.nuEexport module dirs.nuEexport module dt.nuEexport module formats.nuEexport module help.nuEexport module input.nuEexport module iter.nuEexport module log.nuEexport module math.nuEexport module xml.nuEexport-env {E    use dirs.nu []E    use log.nu []E}EEuse dt.nu [datetime-diff, pretty-print-duration]EE# Add the given paths to the PATH.E#E# # ExampleE# - adding some dummy paths to an empty PATHE# ```nushellE# >_ with-env { PATH: [] } {E#     std path add "foo"E#     std path add "bar" "baz"E#     std path add "fooo" --appendE#E#     assert equal $env.PATH ["bar" "baz" "foo" "fooo"]E#E#     print (std path add "returned" --ret)E# }E# ╭───┬──────────╮E# │ 0 │ returned │E# │ 1 │ bar      │E# │ 2 │ baz      │E# │ 3 │ foo      │E# │ 4 │ fooo     │E# ╰───┴──────────╯E# ```E# - adding paths based on the operating systemE# ```nushellE# >_ std path add {linux: "foo", windows: "bar", darwin: "baz"}E# ```Eexport def --env "path add" [E    --ret (-r)  # return $env.PATH, useful in pipelines to avoid scoping.E    --append (-a)  # append to $env.PATH instead of prepending to.E    ...paths  # the paths to add to $env.PATH.E] {E    let span = (metadata $paths).spanE    let paths = $paths | flattenEE    if ($paths | is-empty) or ($paths | length) == 0 {E        error make {msg: "Empty input", label: {E            text: "Provide at least one string or a record",E            span: $spanE        }}E    }EE    let path_name = if "PATH" in $env { "PATH" } else { "Path" }EE    let paths = $paths | each {|p|E        let p = match ($p | describe | str replace --regex '<.*' '') {E            "string" => $p,E            "record" => { $p | get --ignore-errors $nu.os-info.name },E        }EE        $p | path expand --no-symlinkE    }EE    if null in $paths or ($paths | is-empty) {E        error make {msg: "Empty input", label: {E            text: $"Received a record, that does not contain a ($nu.os-info.name) key",E            span: $spanE        }}E    }EE    load-env {$path_name: (E        $envE            | get $path_nameE            | split row (char esep)E            | if $append { append $paths } else { prepend $paths }E    )}EE    if $ret {E        $env | get $path_nameE    }E}EE# convert an integer amount of nanoseconds to a real durationEdef "from ns" [] {E    [$in "ns"] | str join | into durationE}EE# run a piece of `nushell` code multiple times and measure the time of execution.E#E# this command returns a benchmark report of the following form:E# ```E# record<E#   mean: durationE#   std: durationE#   times: list<duration>E# >E# ```E#E# > **Note**E# > `std bench --pretty` will return a `string`.E#E# # ExamplesE#     measure the performance of simple additionE#     > std bench { 1 + 2 } -n 10 | table -eE#     ╭───────┬────────────────────╮E#     │ mean  │ 4µs 956ns          │E#     │ std   │ 4µs 831ns          │E#     │       │ ╭───┬────────────╮ │E#     │ times │ │ 0 │ 19µs 402ns │ │E#     │       │ │ 1 │  4µs 322ns │ │E#     │       │ │ 2 │  3µs 352ns │ │E#     │       │ │ 3 │  2µs 966ns │ │E#     │       │ │ 4 │        3µs │ │E#     │       │ │ 5 │   3µs 86ns │ │E#     │       │ │ 6 │   3µs 84ns │ │E#     │       │ │ 7 │  3µs 604ns │ │E#     │       │ │ 8 │   3µs 98ns │ │E#     │       │ │ 9 │  3µs 653ns │ │E#     │       │ ╰───┴────────────╯ │E#     ╰───────┴────────────────────╯E#E#     get a pretty benchmark reportE#     > std bench { 1 + 2 } --prettyE#     3µs 125ns +/- 2µs 408nsEexport def bench [E    code: closure  # the piece of `nushell` code to measure the performance ofE    --rounds (-n): int = 50  # the number of benchmark rounds (hopefully the more rounds the less variance)E    --verbose (-v) # be more verbose (namely prints the progress)E    --pretty # shows the results in human-readable format: "<mean> +/- <stddev>"E] {E    let times = (E        seq 1 $rounds | each {|i|E            if $verbose { print -n $"($i) / ($rounds)\r" }E            timeit { do $code } | into int | into floatE        }E    )EE    if $verbose { print $"($rounds) / ($rounds)" }EE    let report = {E        mean: ($times | math avg | from ns)E        min: ($times | math min | from ns)E        max: ($times | math max | from ns)E        std: ($times | math stddev | from ns)E        times: ($times | each { from ns })E    }EE    if $pretty {E        $"($report.mean) +/- ($report.std)"E    } else {E        $reportE    }E}EE# Print a banner for nushell with information about the projectEexport def banner [] {Elet dt = (datetime-diff (date now) 2019-05-10T09:59:12-07:00)E$"(ansi green)     __  ,(ansi reset)E(ansi green) .--\(\)°'.' (ansi reset)Welcome to (ansi green)Nushell(ansi reset),E(ansi green)'|, . ,'   (ansi reset)based on the (ansi green)nu(ansi reset) language,E(ansi green) !_-\(_\\    (ansi reset)where all data is structured!EEPlease join our (ansi purple)Discord(ansi reset) community at (ansi purple)https://discord.gg/NtAbbGn(ansi reset)EOur (ansi green_bold)GitHub(ansi reset) repository is at (ansi green_bold)https://github.com/nushell/nushell(ansi reset)EOur (ansi green)Documentation(ansi reset) is located at (ansi green)https://nushell.sh(ansi reset)E(ansi cyan)Tweet(ansi reset) us at (ansi cyan_bold)@nu_shell(ansi reset)ELearn how to remove this at: (ansi green)https://nushell.sh/book/configuration.html#remove-welcome-message(ansi reset)EEIt's been this long since (ansi green)Nushell(ansi reset)'s first commit:E(pretty-print-duration $dt)EEStartup Time: ($nu.startup-time)E"E}EE# the cute and friendly mascot of Nushell :)Eexport def ellie [] {E    let ellie = [E        "     __  ,",E        " .--()°'.'",E        "'|, . ,'",E        " !_-(_\\",E    ]EE    $ellie | str join "\n" | $"(ansi green)($in)(ansi reset)"E}EE# Return the current working directoryEexport def pwd [E    --physical (-P) # resolve symbolic linksE] {E    if $physical {E        $env.PWD | path expandE    } else {E        $env.PWDE    }E}EE# repeat anything a bunch of times, yielding a list of *n* times the inputE#E# # ExamplesE#     repeat a stringE#     > "foo" | std repeat 3 | str joinE#     "foofoofoo"Eexport def repeat [E    n: int  # the number of repetitions, must be positiveE]: any -> list<any> {E    let item = $inEE    if $n < 0 {E        let span = metadata $n | get spanE        error make {E            msg: $"(ansi red_bold)invalid_argument(ansi reset)"E            label: {E                text: $"n should be a positive integer, found ($n)"E            	span: $spanE            }E        }E    }EE    if $n == 0 {E        return []E    }EE    1..$n | each { $item }E}EE# return a null device file.E#E# # ExamplesE#     run a command and ignore it's stderr outputE#     > cat xxx.txt e> (null-device)Eexport def null-device []: nothing -> path {E    if ($nu.os-info.name | str downcase) == "windows" {E        '\\.\NUL'E    } else {E        "/dev/null"E    }E}
VC# std.nu, `used` to load all standard library componentsEEexport module assert.nuEexport module dirs.nuEexport module dt.nuEexport module formats.nuEexport module help.nuEexport module input.nuEexport module iter.nuEexport module log.nuEexport module math.nuEexport module xml.nuEexport-env {E    use dirs.nu []E    use log.nu []E}EEuse dt.nu [datetime-diff, pretty-print-duration]EE# Add the given paths to the PATH.E#E# # ExampleE# - adding some dummy paths to an empty PATHE# ```nushellE# >_ with-env { PATH: [] } {E#     std path add "foo"E#     std path add "bar" "baz"E#     std path add "fooo" --appendE#E#     assert equal $env.PATH ["bar" "baz" "foo" "fooo"]E#E#     print (std path add "returned" --ret)E# }E# ╭───┬──────────╮E# │ 0 │ returned │E# │ 1 │ bar      │E# │ 2 │ baz      │E# │ 3 │ foo      │E# │ 4 │ fooo     │E# ╰───┴──────────╯E# ```E# - adding paths based on the operating systemE# ```nushellE# >_ std path add {linux: "foo", windows: "bar", darwin: "baz"}E# ```Eexport def --env "path add" [E    --ret (-r)  # return $env.PATH, useful in pipelines to avoid scoping.E    --append (-a)  # append to $env.PATH instead of prepending to.E    ...paths  # the paths to add to $env.PATH.E] {E    let span = (metadata $paths).spanE    let paths = $paths | flattenEE    if ($paths | is-empty) or ($paths | length) == 0 {E        error make {msg: "Empty input", label: {E            text: "Provide at least one string or a record",E            span: $spanE        }}E    }EE    let path_name = if "PATH" in $env { "PATH" } else { "Path" }EE    let paths = $paths | each {|p|E        let p = match ($p | describe | str replace --regex '<.*' '') {E            "string" => $p,E            "record" => { $p | get --ignore-errors $nu.os-info.name },E        }EE        $p | path expand --no-symlinkE    }EE    if null in $paths or ($paths | is-empty) {E        error make {msg: "Empty input", label: {E            text: $"Received a record, that does not contain a ($nu.os-info.name) key",E            span: $spanE        }}E    }EE    load-env {$path_name: (E        $envE            | get $path_nameE            | split row (char esep)E            | if $append { append $paths } else { prepend $paths }E    )}EE    if $ret {E        $env | get $path_nameE    }E}EE# convert an integer amount of nanoseconds to a real durationEdef "from ns" [] {E    [$in "ns"] | str join | into durationE}EE# run a piece of `nushell` code multiple times and measure the time of execution.E#E# this command returns a benchmark report of the following form:E# ```E# record<E#   mean: durationE#   std: durationE#   times: list<duration>E# >E# ```E#E# > **Note**E# > `std bench --pretty` will return a `string`.E#E# # ExamplesE#     measure the performance of simple additionE#     > std bench { 1 + 2 } -n 10 | table -eE#     ╭───────┬────────────────────╮E#     │ mean  │ 4µs 956ns          │E#     │ std   │ 4µs 831ns          │E#     │       │ ╭───┬────────────╮ │E#     │ times │ │ 0 │ 19µs 402ns │ │E#     │       │ │ 1 │  4µs 322ns │ │E#     │       │ │ 2 │  3µs 352ns │ │E#     │       │ │ 3 │  2µs 966ns │ │E#     │       │ │ 4 │        3µs │ │E#     │       │ │ 5 │   3µs 86ns │ │E#     │       │ │ 6 │   3µs 84ns │ │E#     │       │ │ 7 │  3µs 604ns │ │E#     │       │ │ 8 │   3µs 98ns │ │E#     │       │ │ 9 │  3µs 653ns │ │E#     │       │ ╰───┴────────────╯ │E#     ╰───────┴────────────────────╯E#E#     get a pretty benchmark reportE#     > std bench { 1 + 2 } --prettyE#     3µs 125ns +/- 2µs 408nsEexport def bench [E    code: closure  # the piece of `nushell` code to measure the performance ofE    --rounds (-n): int = 50  # the number of benchmark rounds (hopefully the more rounds the less variance)E    --verbose (-v) # be more verbose (namely prints the progress)E    --pretty # shows the results in human-readable format: "<mean> +/- <stddev>"E] {E    let times = (E        seq 1 $rounds | each {|i|E            if $verbose { print -n $"($i) / ($rounds)\r" }E            timeit { do $code } | into int | into floatE        }E    )EE    if $verbose { print $"($rounds) / ($rounds)" }EE    let report = {E        mean: ($times | math avg | from ns)E        min: ($times | math min | from ns)E        max: ($times | math max | from ns)E        std: ($times | math stddev | from ns)E        times: ($times | each { from ns })E    }EE    if $pretty {E        $"($report.mean) +/- ($report.std)"E    } else {E        $reportE    }E}EE# Print a banner for nushell with information about the projectEexport def banner [] {Elet dt = (datetime-diff (date now) 2019-05-10T09:59:12-07:00)E$"(ansi green)     __  ,(ansi reset)E(ansi green) .--\(\)°'.' (ansi reset)Welcome to (ansi green)Nushell(ansi reset),E(ansi green)'|, . ,'   (ansi reset)based on the (ansi green)nu(ansi reset) language,E(ansi green) !_-\(_\\    (ansi reset)where all data is structured!EEPlease join our (ansi purple)Discord(ansi reset) community at (ansi purple)https://discord.gg/NtAbbGn(ansi reset)EOur (ansi green_bold)GitHub(ansi reset) repository is at (ansi green_bold)https://github.com/nushell/nushell(ansi reset)EOur (ansi green)Documentation(ansi reset) is located at (ansi green)https://nushell.sh(ansi reset)E(ansi cyan)Tweet(ansi reset) us at (ansi cyan_bold)@nu_shell(ansi reset)ELearn how to remove this at: (ansi green)https://nushell.sh/book/configuration.html#remove-welcome-message(ansi reset)EEIt's been this long since (ansi green)Nushell(ansi reset)'s first commit:E(pretty-print-duration $dt)EEStartup Time: ($nu.startup-time)E"E}EE# the cute and friendly mascot of Nushell :)Eexport def ellie [] {E    let ellie = [E        "     __  ,",E        " .--()°'.'",E        "'|, . ,'",E        " !_-(_\\",E    ]EE    $ellie | str join "\n" | $"(ansi green)($in)(ansi reset)"E}EE# Return the current working directoryEexport def pwd [E    --physical (-P) # resolve symbolic linksE] {E    if $physical {E        $env.PWD | path expandE    } else {E        $env.PWDE    }E}EE# repeat anything a bunch of times, yielding a list of *n* times the inputE#E# # ExamplesE#     repeat a stringE#     > "foo" | std repeat 3 | str joinE#     "foofoofoo"Eexport def repeat [E    n: int  # the number of repetitions, must be positiveE]: any -> list<any> {E    let item = $inEE    if $n < 0 {E        let span = metadata $n | get spanE        error make {E            msg: $"(ansi red_bold)invalid_argument(ansi reset)"E            label: {E                text: $"n should be a positive integer, found ($n)"E            	span: $spanE            }E        }E    }EE    if $n == 0 {E        return []E    }EE    1..$n | each { $item }E}EE# return a null device file.E#E# # ExamplesE#     run a command and ignore it's stderr outputE#     > cat xxx.txt e> (null-device)Eexport def null-device []: nothing -> path {E    if ($nu.os-info.name | str downcase) == "windows" {E        '\\.\NUL'E    } else {E        "/dev/null"E    }E}
nvim test
ls
clear
ls
workspace
ls
cd youtube
ls
ng serve
ls
cd youtube
ls
gs
g add -A
g commit -m "refactor: remove console.logs"
gp
ls
pfetch
clear
ls
color
nu-highlight
ls
ды
ls
cd dotfiles
ls
cd .config
cp ~/.config/nushell .
cp ~/.config/nushell . -r
rm -rf hypr
cp ~/.config/hypr . -r
cp ~/.config/nvim . -r
ls
gs
g add -A
g commit -m "update neovim, add new hyprland wallpapers, migrate to nushell"
gp
ls
rm -rf kitty
ls
cp ~/.config/kitty . -r
gs
g add -A
g commit -m "update kitty config"
gp
notify-send ":3"
cd .config/hypr/waybar
ls
kitty +list-fonts
ls
rm -rf .cache/*
sudo rm -rf .cache/*
ls
cd music
ls
ls -T
v
gs
g add -A
g commit -m "feat: implement previous page pagination"
gp
gs
g add -A
g commit -m "chore: add todo"
gp
neofetch
clera
ды
ls
gs
1gs
gs
g add -A 
g commit -m "refactor: remove code repetion"
gp
gs
g add -A
g commit -m "refactor: rename function parameter"
gp
gs
g add -A 
g commit -m 
gs
g add -A
g commit -m 'refactor: more declarative code'
gp
g
gs
g add -A 
g commit -m 'refactor: move repeated  type into interface'
gp
clear
parsyu
sudo pacman -Syyyuuu
sudo mount /dev/sda1 /mnt/sda1
vu
sudo dinitctl start bluetoothd
open
open test
ls
open core.651
clear
help -f regex
ls
rm -rf core.*
ls
cd .local/bin
ls
nvim tmux-sessionizer.ni
32 | describe
30mb | describe
'helol' | describe
ls | each { |it| $"($it.name) is ($it.size)" }
1.454545
1..4545
1..10
1..10 | describe
1..
-1..1
-50000..1
..2
0o[377]    # Octal
l
ls
cd .local/bin
ls
nvim tmux-sessionizer.nu
./tmux-sessionizer.nu
chmod +x ./tmux-sessionizer.nu
./tmux-sessionizer.nu
nvim tmux
ls
cd .local/bin
ls
nu tmux-sessionizer.nu
help find
find /mnt/sda1/workspace
help find
help modules 
banner
repeat
use std
banner
std banner
std banner | wl-copy
ды
ls
cd youtube
cd youtube
ls
ll
ls -La
ls -la
ls
df
d
ls
print "hello'<\n>"
ls
cd dotfiels
cd dotfiles
ls
cd .config
ls
cd Music
ls
l
ls
cd vk_____________treenokh/
ls
https://www.youtube.com/watch?v=EHPzMa5giJY
pidof syncthing
ls
nu config
ls
swww
btop
ls
cd .config/nushell
ls
cd
ls
cd nu_scripts
ls
colorsvn
raji
caga
cava
modprobe libiniparser
paru -Rns cava
paru -S cava-git
v starship.toml
ls
mv starship.toml starrship.toml
ls
mv starship2.toml starship.toml
ls
ls
mv starship.toml starship.tomld
ls
mv starrship.toml starhip.toml
ls
cd Pictures
ls
ffplay Recording.mp3
ls
cd youtube
ls
eza -T
exa
ls
eza
ls
cd youtube
ls
eza -T --icons src
echo $SHELL
echo $env.SHELL
clear
cate
date
date humanize
date now
пы
gs
g add -A
g commit -m "fix: incorrect pagination logic"
ls
gs
gp
v
b
gs
g add -A
g commit -m "refactor: move custom card removal predicate into seperate function"
gp
sudo dinitctl start bluetoothd
v
ls
gs
g add -A
g commit -m 
git commit -m 'feat: make use of loading property in store'
gp
parsyu
sudo dinitctl start bluetoothd
l
ls
sudo mount /dev/sda1 /mnt/sda1
ls
ezz
eza
eza -l --icons
v
config nu
e
ez
source $nu.config-path
clear
ls
ez
ez -T
sudo dinitctl start bluetoothd
ls
cd youtuve
cd youtube 
ls
ng seve
ls
cd youtube
ls
cd src
ls
cd app
ls
mkdir favorites
ls
cd favorites
ls
mkdir components 
ls
cd components
ls
ng g favorites
ng g c favorites
м
v
ls
cd youtube
gs
g add -A
g commit -m 
g commit -m  'feat: add favorites page'
gp
sudo dinitctl start bluetoothd
brave --help
brave --disabel-gpu-vsynv --disable-frame-rate-limit
brave --disabel-gpu-vsync --disable-frame-rate-limit
brave --disable-gpu-vsync --disable-frame-rate-limit
ls
jq
echo '{"mobile_network_type":"unknown","content":"afsdf","nonce":"1267156526334738432","tts":false,"flags":0}' | jq
echo '{"mobile_network_type":"unknown","content":"afsdf","nonce":"1267156526334738432","tts":false,"flags":0}' | jq | wl-copy
ls
node node.js
ls
node node.js
ls
mkdir scriptieeeees
cd scriptieeeees/
git init
git remote add origin https://github.com/VKTRenokh/scriptiessssss
ls
git status
git remote -v
gp
gp -u
ls
cp node.js scriptieeeees/pinging.js
ls
g add -A
g commit -m 'add pinging script'
ls
gp
ls
cd ..
ls
rm -rf scriptieeeees/
ls
workspace
ls
git clone https://github.com/VKTRenokh/scriptiessssss.git
rm -rf helix node.js rstasks
ls
l
ls
ls youtube
ls
rm -rf youtube
ls
rm -rf core.*
ls
l
workspace
ls
cd scriptiessssss/
ls
v pinging.js
ls
node pinging.js
ls
nvim pinging.js
node pinging.js
clear
ls
gs
g add -A
g commit -m 'update script'
gp
dbus-launch Hyprland
date now
ls
ffplay `2024-07-28 21-42-08.mp4`
ffplay `2024-07-28 21-45-33.mp4`
ffplay `2024-07-28 21-50-30.mp4`
ды
ls
ffplay `2024-07-28 21-45-37.mp4`
тм
nvim
v
workspace
ls
cd scriptiessssss/
ls
nvim pinging.js
node pinging.js
gs
g add -A
g commit -m 
g commit -m 'feat: add favorite button'
gp
parsyu
btop
btop --utf-force
ls
ffplay `2024-07-28 21-45-37.mp4`
sudo mount /dev/sda1 /mnt/sda1
ls
rm -rf `2024-07-28 21-42-08.mp4`
rm -rf `2024-07-28 21-45-33.mp4`
rm -rf `2024-07-28 21-50-30.mp4`
rm -rf `2024-07-28 22-03-55.mp4`
ls
ls mudic
ls
cd nu_scripts/
git pull
ls
cp nu_scripts/themes/ ~/.config/nu -r
cd .config/nu
ls
cd ..
cd .config/nushell
ls
config nu
xta
ls
cd .config/nushell
ls
cd nushell/
la
ls
cp ~/nu_scripts/
cp ~/nu_scripts/ . -r
,s
ls
nu config
xta
ez
x
ls
xta
workspace
ls
xta
xta ws
bt
ba
bat
sudo pacman -S bat
paru -S bat
ls
cd .local/bin
ls
fd
rg
ls
rg --help
rg -mindepth 1
rg -m 1
fd -mindepth 1
fd --help
fd --depth 1
fd --max-depth 1
ls
./.local/bin/tmux-sessionizer.nu
fd /mnt/sda1/workspaxe
fd /mnt/sda1/workspace
fd --full-path /mnt/sda1/workspace
ls /mnt/sda1/workspace/
clear
ls
l
ls
tmux-sessionizer
v
ls
workspace
ls
cd scriptiessssss/
ls
nvim pinging.js
node pinging.js
workspace
ls
cd scriptiessssss/
ls
v
yfw
ufw
workspace
cd scriptiessssss/
node pinging.js
ls
nvim pinging.js
node pinging.js
cd youtube
ls
sudo dinitctl start bluetoothd
rfkill unblock all
pidof syncthing
ls
claer
rm -$f core.*
ls
rm -rf core.*
ls
clear
cmup && cmus
cmus and cmup
cmup and cmus
м
ls
ffplay `2024-07-28 21-45-37.mp4`
ffmpeg -ss 62 -i `2024-07-28 21-45-37.mp4`  -t  65 -c copy a.mp4
ls
ffplay a.mp4
ls
ffmpeg -ss 62 -i `2024-07-28 21-45-37.mp4` -to 65 -c copy a.mp4
ls
ffplay a.mp4
ffmpeg -ss 62  -to 65 -i `2024-07-28 21-45-37.mp4` -c copy a.mp4
ls
ffplay a.mp4
ls
mkdir a
mv a.mp4 a
ls
cd a
ls
ffmpeg -i input.mp4 frame%04d.png
ffmpeg -i .mp4 frame%04d.png
ffmpeg -i a.mp4 frame%04d.png
ls
ffmpeg -i input.mp4 -vf "fps=10,scale=320:-1:flags=lanczos" -c:v gif output.gifE
clear
ffmpeg -i a.mp4 -vf "fps=10,scale=320:-1:flags=lanczos" -c:v gif output.gif
ls
ffplay output.gif
ls
ffmpeg -i a.mp4 -vf "fps=45,scale=320:-1:flags=lanczos" -c:v gif output.gif
ffplay output.gif
ды
ls
rm -rf a
ls
cd src
l
ls
cd app
ls
cd shared
ls
cd components
ls
ng g c pagination
ls
gs
g add -A
g commit -m "refactor: move pagination into reusable component"
gp
workspace
ls
cd scriptiessssss/
ls
node pinging.js
ls
nvim pinging.js
node pinging.js
ga
gs
g add -A
g commit -m 'refactor: remove useless console.logs'
gp
g
gs
g add -A
g commit -m 'feat: add styles for loader'
ls
gp
ls
gs
ga
gs 
g add -A
g commit -m 'feat: change buttons layout'
gp
ls
ды
ls
cd ..
ls
workspace
ls
cd scriptiessssss/
gs
g add -A 
g commit -m 'feat: add favorites reducer'
gp
ls
workspace
ls
cd scriptiessssss/
ls
node pinging.js
ls
nvim pinging.js
node pinging.js
ls
cd .config
ls
cd nushell
ls
workspace
cd vktrenokh-angular2024q3/
gs
g add -A
g commit -m 'feat: add addition to favorite action'
gp
pidof syncthing
cd Music/
ls
cd vk_____________treenokh/
ls
zsh
ls
clear
ls
cat note
nvim note
ls
cat игорь_уйди_пожалуйста
ды
ls
cd Music
ls
cd jump/
ls
nvim note
node
node --alow-typescript
node --ehlp
node --help
node --help | grep allow
reboot
clear
parsyu
sudo pacman -Sssyyuuu
sudo pacman -Syyuuu
sudo pacman -Syyuuuu
sudo dinitctl start bluetoothd
curl parselapp.com
curl https://parcelsapp.com/en/tracking/LE628136870DE
ls
parsyu
sudoedit /etc/mkinitcpio.d/linux.preset
mkinitcpio
sudo dinitctl start bluetoothd
ls
sudo mount /dev/sda1 /mnt/sda1
ls
cd youtube
ls
l
ls
ng seve
parsyu
bun upgrade
bun
.bun
ls
cd bin
lsd
ls
./bun upgrade
ls
config nu
bun
syncthing
cd music
ls
cd jump
l
ls
cat note
cd ..
cd vk_____________treenokh/
ls
cd phonk$/
ls
cd music
ls
cd vk_____________treenokh/
ls
cd phonk$/
cd ..
ls
v ?
g add -A
g s
gs
g commit -m 'feat: add favorites reducer to provideStore'
gp
pidof syncthing
v
g
gs
g add -A
g commit -m 'feat: add favorite selectors'
gp
ga
gs
g add -A
g commit -m 'fix: incorrect typings'
gp
gs
g commit -m 'refactor: remove useless console logs'
gp
g add -A
g commit -m 'refactor: remove useless console logs'
gp
date
date now
gs
g add -A
g commit -m 'feat: implement favorite toggling functionality'
gp
gs
g add -A 
g commit -m 'refactor: remove repeating code'
gp
date
date now
gs
g add -A 
g commit -m 'feat: implement selectFavoriteVideos selector'
gp
вфеу тщц
date now
parsyu
clear
sudo dinitctl start bluetoothd
rfkill unblock all
sudo mount /dev/sda1 /mnt/sda1
cat /proc/mem
ды
cd youtube/
ls
cd src
ls
gs
g add -A 
g commit -m 
g commit -m 'feat: display favorite videos on favorites page'
gp
ls
cd app/src/shared/components
cd src/app/shared/components
cd /app/shared/components
cd app/shared/components
ls
ng g c favorite-button
gs
g add -A
g commit -m 'feat: implement favorite button reusable component'
gp
gs
g add -A 
g commit -m 'feat: implement favorite button'
gp
clear
parsyu
nano
sudo dinitctl start bluetoothd
sudo mount /dev/sda1 /mnt/sda1
v
cd youtube/
cd youtube/
rfkill unblock all
gs
g add -A
g commit -m 'refactor: fully rewrite favorite button component'
gp
gs
g add -A
g commit -m 'refactor: add favorite button to detailed info component'
gp
gs
g commit --amend
gp -f
ls
ng build
scp dist/youtube/browser/ root@45.93.137.165:/root
scp -r dist/youtube/browser/ root@45.93.137.165:/root
kitten ssh root@45.93.137.165
v
date
date now
date
date now
v
wg-quick
sudo pacman -S wireguard
sudo pacman -S wireguard-dinit
sudoedit /etc/wireguard/wg0.conf
$ umask 077E$ wg genkey > privatekey
umask -77
umask
zsh
clear
ls
cat privatekey
dinitclt
sudo dinitctl start wg-quick 
sudo dinitctl start wg-quick@wg0
wg-quick up wg0
ping google.com
wg-quick down wg0
rfkill unblock all
ufw
zsh
sudoedit /etc/wireguard/wg0.conf
wg-quick down wg0
wg-quick up wg0
wg show
sudo wg show
ping google.com
wg down wg0
wg-quick down wg0
dafsadf
gs
g add -A 
g commit -m 'fix: add takeUntilDestroyed'
gp
gs
ga
g add -A 
g commit -m 'feat: add @empty fallback'
gp
gs
ls
v
g add -a
g add -A 
g commit -m 'refactor: remove useless class field'
gp
ls
cd .config
ls
v
nu config
config u
config nu
git checkout develop
git pull
git graph
ls
clear
ng test
ls -T
ls
zta
xta
xta src
ls
npm install --save-dev jest jest-preset-angular @types/jest
ls
ll
pnpm install --save-dev jest jest-preset-angular @types/jest
pnpm
ls
cd .pnpm
ls
cd .npm
ls
ll
cd ..
ls
rm -rf core.*
ls
cd /usr/lib/node_modules/
ls
pnpm
ls
ll
cd ..
ls
cd ..
ls
cd ..
ls
/usr/bin/pnpm
.local/share/pnpm/pnpm
ls
~
.local/share/pnpm/pnpm
ls
ls
pnpm install --save-dev jest jest-preset-angular @types/jest
ls
pnpm install --save-dev jest jest-preset-angular @types/jest
$path
$Nu.path
$nu.PATH
$PATH
$env.PATH
/home/vktrenokh/.local/share/pnpm/pnpm 
v
ls
pnpm install --save-dev jest jest-preset-angular @types/jest
sudo pacman -S gleam
env sh
paru -S gleam
пдуфь
gleam
ls
cd Documents/
ls
gleam
ls
workspace
clear
gleam new
gleam new test
gleam new hello
cd hello
ls
gleam test
v
workspace
ls
cd ~
ls
workspace
ls
git clone https://github.com/cmus-enjoyers/sneaky-cmup-9
tks
v
ls
gleam new cmup
ls
rm -rf cmup
gleam new glema
ls
rm -rf glema
ls
gleam new gleam
mkdir gleam
cd gleam
ды
ls
gleam new cmup
lks
ls
ды
ls
ls -T
xta
ls
v
cd cmup
v
ls
git checkout vktrenokh
git checkout -b vktrenokh
g commit -m 'init: init gleam project'
gs
g add -A
g commit -m 'init: init gleam project'
gs
gleam
ls
nvim test.glea
parsyu
sudo dinitctl start bluetoothd
sudo dinitctl lgos
sudo dinitctl logs
sudo dinitctl --help
dinitctl list
sudo dinitctl list
cmup and cmus
м
v
paru -S gleam-lsp
paru -S gleam_lsp
gleam compile
gleam build
sudo pacman -S firefox
firefox
sudoeidt /etc/wireguard/wg0.conf
ls
cd /etc/wireguard/
ls
cd /etc/wireguard/
sudo su
wg-quick up wg0
ping 45.93.137.165
wg down wg0
sudo wg down wg0
wg-quick down wg0
sudo wg-quick up wg0
ping 45.93.137.165
sudo wg-quick down wg0
ping 45.93.137.165
wg show
ip addr show wg0
ip route
ls
wg-quick up wg0
ping 45.93.137.165
ip route
wg-quick down wg0
wg-quick up wg0
ping 45.93.137.165
wg-quick down wg0
kitten ssh root@45.93.137.165
ls
sudo su
wg-quick down wg0
sudo wg-quick up wg0
ping 45.93.137.165
wg-quick down wg0
sudoedit /etc/wireguard/wg0.conf
sudo wg-quick up wg0
ping 45.93.137.165
curl 2ip.ua
wg show
sudowg show
sud owg show
sudo wg show
ip route
sudo wg-quick down wg0
sudo wg-quick up wg0
ping 45.93.137.165
curl 2ip.ua
wg show conf wg0
ls
sudo wg show conf wg0
wg
sudo wg
sudoedit /etc/wireguard/wg0.conf
sudo wg down wg0
sudo wg-quick up wg0
sudo wg-quick down wg0
sudo wg-quick up wg0
wg show
sudo wg show
ping 45.93.137.165
sudo wg show
sudo wg-quick down wg0
sudo wg-quick up wg0
curl 2ip.ua
sudo wg-quick down wg0
sudo mount /dev/sda1 /mnt/sda1
v
ls
cd gleam
ls
cd cmup
ls
gleam run
gleam build
ls
cd build
ls
ls
xta gleam
gleam run
ls
cd gleam
ls
gleam run
cd cmup
gleam run
ls
gleam build
пдуфь
gleam
gleam lsp
gleam docs
gleam build
ls
gleam build
ls
1ls
ls
cd build
ls
cd prod
ls
cd erlang/
ls
cd ..
ls
cd ..
ls
cd dev
ls
cd erlang/
ls
cd cmup
ls
cd ebin
ls
./cmup.beam
ls
beam
cd ...
ls
cd ......
ls
cd gleam
ls
cd cmup
ls
gleam compile
gleam compile-package
gleam compile-package --help
gleam compile-package --traget
gleam compile-package --target
gleam compile-package --target js
gleam compile-package --out dist
gleam compile-package --out dist --target js --package cmup
gleam compile-package --out dist --target js --package cmup --lib .
ls
gleam compile-package --out dist --target js --package . --lib .
gleam compile-package --out dist --target erlang --package . --lib .
gleam compile-package --out dist --target erlang --package . --lib io
gleam compile-package --out dist --target erlang --package . --lib gleam/io
gleam build --trarget javascript
gleam build --target javascript
ls
gleam build --target javascript
ls
gleam urn
gleam run
gleam run --target javascript
ls
cat file.txt
ls
time gleam run --target javascript
ls
gleam run --target javascript
ls
gleam run --target javascript
beam
gleam run --target javascript
ls
cd build
v
cd build
gleam run --target javascript
gleam build && gleam run --target javascript
gleam build ; gleam run --target javascript
gleam build --target js ; gleam run --target javascript
ls
cd ..
ls
rm -rf build
gleam build --target js ; gleam run --target javascript
v
gleam build --target js ; gleam run --target javascript
ls
cat file.txt
gleam build --target js ; gleam run --target javascript
bun
gleam build --target js ; gleam run --target javascript
gleam add simplifile
gleam remove simplfile
gleam remove simplifile
gleam build --target js ; gleam run --target javascript
ls
node hello.js
пы
gs
g add -A
g commit -m 'feat: implement write file interop'
cmus
ls
cd .config/
ls
cd cmus/playlists/
;s
ls
rm -rf *
ls
cmup
cmus
ls
cd ..
ls
..
ls
cd ..
cd .local/bin/
ls
cmup
env sh
cmup
cmus
rm -fr .config/cmus/playlists/*
pidof syncthing
ls
cd Music
v
cd vk_____________treenokh/
v
cd ..
ls
cd jump/
v
gleam run --target javascript
v
ls
cd youtuve
cd youtube
cd youtube
м
ls
cd gleam
ls
v
cd cmup
gleam run --target javascript
gs
g add -A 
g commit -m 'feat: add banner'
gp
git log
git reset --soft 31ae556913c6515ca8fb444fe13c4da2fe9e94c7
gp -f
g
gs
git reflog
git reset --hard 5a5897c
ls
gs
v
ls
;q
:
cd youtube
ls
l
ls
м
git  checkout -b signals
ls
gp -u
lgs
gs
g add -A
g commit -m 'feat: add toSignal convertion to isLoading field'
gp
ls
ng build
scp -r dist/youtube/browser/ root@45.93.137.165:/root
gs
date now
ls
cd Music
ls
cd vk_____________treenokh/
ls
mkdir unreal-sleep-evening-bim-bom$
ls
cd unreal-sleep-evening-bim-bom$/
v
;s
ls
v
git reset --hard
ls
v
ls
cd gleam/cmup
ls
parsyu
sudo dinitctl start bluetoothd
rfkill unblock all
sudo mount /dev/sda1 /mnt/sda1
ls
cd .config
cd cmus
ls
v
ls
cd ..
ls
clea
clear
workspace
ls
v
cd gleam/cmup
v
tks
ls
cd gleam/cmup
v
ls
v test.glea
v test.gleam
ls
rm -rf tets.glea
rm -rf tets.gleam
ls
cd Downloads/
ls
sudo mkdir /mnt/win
sudo mount Win11_23H2_EnglishInternational_x64v2.iso -o loop /mnt/win
cd /mnt/win
ls
ll
chmod 777 .
ls
ls -T
xta
ls
clear
ls
cd /etc/win
ls
cd /mnt/win
ls
mkdir ~/win-11-sio
cp -r /mnt/win/* ~/win-11-sio/
sudo cp -r /mnt/win/* ~/win-11-sio/
lls
ls
rm -rf win-11-sio/
sudo rm -rf win-11-sio/
ls
mkdir /mnt/sda1/win
cp -r /mnt/win/* ~/mnt/sda1/win
cp -r /mnt/win/* /mnt/sda1/win/
sudo cp -r /mnt/win/* /mnt/sda1/win/
ls
cd ..
sudo umount /mnt/win/
ls
cd sda1/
ls
cd win
ls
v
sudo pacman -S wimtools
paru -S wimtools
pacman wim
pacman -Qs wim
pacman -Q wim
pacman --help
paru
paru wim
paru -S wimlib
sudo pacman -S genisoimage xorriso squashfs-toolsE
paru -S genisoimage
ls
cd sources
ls
cat install.wim
sudo pacman -S wimlib
ls
tar -xf wimlib-1.14.4.tar.gz
ls
cd wimlib-1.14.4/
ls
make
ls
v
make
make install
ls
nvim README.md
./configure
sudo pacman -S libntfs-3g
paru -S libntfs-3g
paru -S libntfs
paru -S ntfs-g
paru -S ntfs-3g
ls
./configure
v
make
ls
sudo make install
wimlib
wimlib-imagex 
sudo wimlib-imagex mount /mnt/sda1/win/sources/install.wim 1 /mnt/win/
cd /mnt/win
cd /mnt
ls
cd win
cat win
ls
cd /mnt/sda1/
ls
cd win
ls
ll
sudo mount ~/Downloads/Win11_23H2_EnglishInternational_x64v2.iso -o loop /mnt/win
cd /mntwin
cd /mnt/
ls
cd win
ls
ll
cd ..
ls
ls
ll
ll
cd boot
ls
ll
cd /mnt
ls
sudo umount win
ls
sudo wimlib-imagex mount /mnt/sda1/win/sources/install.wim 1 /mnt/win/ --rw
ls
tks
ls
rm -rf wimlib-1.14.4/
ls
rm -rf wimlib-1.14.4.tar.gz
ls
rm -rf test.gleam
rm -rf privatekey
ls
rm -rf publickey
ls
ды
ls
wg show
cd /etc/
ls
v
cd gleam/cmup
gleam run
gleam format
gleam run
gleam run --target javascript
ls
cd Downloads/
ls
rm -rf Win11_23H2_EnglishInternational_x64v2.iso
ls
gleam run --target javascript
ls
gleam run --target javascript
ls
gleam run --target javascript
workspace
ls
cd vktrenokh-angular2024q3/
ls
v
git checkout develop
git pull
git checkout -b testing
gp -u
gleam run --target javascript
1ls
gleam run --target javascript
1ls
gleam run --target javascript
gs
g add -A
g commit -m 'feat: update banner code'
gleam run --target javascript
g
gs
g add -A
g commit -m 'fix: incorrect symbol used as an side border'
gleam run --target javascript
gleam format
gleam run --target javascript
gleam format
gleam run --target javascript
gs
g add -A 
g commit -m 'refactor: more cleaner cod'
git commit --amend
cd Music
ls
cd vk_____________treenokh/
ls
ls
mkdir idkwtp$
cd idkwtp$/
ls
cd Downloadsa
cd Downloads
ls
magick lucy.svg lucy.png
gleam run --target javascript
gleam format
gs
ls
gleam run --target javascript
gs
g add -A
g commit -m 'feat: implement get longest string length function'
tsk
date
date now
ls
cd youtube
ls
ng test
gs
g add -A
g commit -m 'feat: remove test field from angular.json'
gp
parsyu
dbus-launch nvim
sudo dinitctl start bluetoothd
sudo mount /dev/sda1 /mnt/sda1
ls
v
tk
ls
cd gleam/cmup
cd gleam/cmup
gleam run --target javascript
ls
cat tet
cat test
gleam run --target javascript
ls
gleam run --target javascript
ls
gleam run --target javascript
ls
gleam run --target javascript
gleam build --target js
ls
cd build
ls
cd dev
ls
cd javascript/
ls
cd cmup
gleam clean
v
ls
cd ..
ls
cd cmup
ls
cat hello.js
rm -rf hello.js
ls
gleam build --target js
ls
gleam run
gleam run --target javascript
gs
g add -A 
g commit -m 'feat: implement ls'
parsyu
dbus-launch nvim
sudo mount /dev/sda1 /mnt/sda1
v
cd gleam/cmup
tks
v
cd gleam/cmup
gleam run --target javascript
cd dotfiels
cd dotfiles
ls
cd .cofngi
cd .confgi
cd .config
rm -rf nvim
cp ~/.config/nvim . -r
rm -rf hypr
cp ~/.config/hypr . -r
ls
rm -rf nushell
neofetch
fastfethc
sudo pacman -S fastfetch
fastfetch
grim
sudo pacman -S grim slurp
sudo pacman -S firefox
clear
fastfetch
girm
grim
slurp
cd .config/hypr
ls
v
nvim
v
nvim
v
nvim
clear
fastfetch
sudo pacman -S wl-clipboard
clear
fastfetch
sudo pacman -S bluetooth
sudo pacman -S bluetoothd
sudo pacman -S bluez
sudo pacman -S fennel
brightnessctl
sudo pacman -S bluez
sudo dinitctl start bluetoothd; rfkill unblock all;
sudo pacman -S bluez-dinit
sudo dinitctl start bluetoothd; rfkill unblock all;
sudo pacman -S blueberry
сдуфк
clear
sudo pacman -S --needed base-develEgit clone https://aur.archlinux.org/paru.gitEcd paruEmakepkg -si
git clone https://aur.archlinux/org/paru.git
git clone https://aur.archlinux.org/paru.git
cd paru
makepkg -si
clear
fastfetch
duf
sudo pacman -S duf
duh
duf
clear
lsblk
paru -S swww
paru -S swww wofi
fastfetch
swww
swww init
swww-daemon
chsh
clear
ls
sudo dinitctl start bluetoothd; rfkill unblock all;
paru 
paru -S blueberry
brightnessctl
config nu
cd .config/hypr/
paru -S wofi gitmux bibata-cursor-theme playerctl eza hyprshade
paru -S ncpamixer
curl -sS https://starship.rs/install.sh | sh
clear
cd .config/
ls
cat starhip.toml
ls
clear
ls
nu config
config nu
clear
config nu
ls
cd nushell
ls
v config.nu
nvim config.nu
sudo pacman -S pfetch
paru -S pfetch
cd /boot
ls
cd grub
ls
sudo grub-mkconfig /boot/grub/grub.cfg
sudo grub-mkconfig -o /boot/grub/grub.cfg
nvim grub.cfg
ls
clear
pfetch
clear
ls
cd .config/hypr
sudo pacman -S node
sudo pacman -S nodejs
ncpamixer
pamixer
ncpamixer
mix
man nc
ncpamixer
clear
ls
config nu
clear
ls
nvm
nvim
cd .config/nushell/
ls
nvim env.nu
cd .config
ls
mv starhip.toml starship.toml
clear
sudo pacman -S zip
unzip
sudo pacman -S unzip
sudo dinitctl start bluetoothd; rfkill unblock all;
ncpamixer
paru -S ncpamixer
paru -R pulseaudio
paru -S pavucontrol
paru -S brave
cd Downloads
ls
cat settings.txt
tmux
clear
s
ls
cd Documents
mkdir Documents
cd Documents
ls
cd dotfiles
ls
cp .gitconfig
ll
cp .gitconfig ~/
nvim ~/.gitconfig
git clone https://github.com/VKTRenokh/t.git
clear
ls
cd t
node
sudo pacman -S npm
suod npm install -g pnpm
sudo  npm install -g pnpm
pnpm
clear
ls
pnpm i
clear
ls
v
lsls
ls
cd Downloads
ls
mkdir iosevka
mv Iosevka Iosevka.zip
mv Iosevka.zip iosevka 
ls
mkdir victor
ls
cd src
ng serve
ng buidl
ng serve --aot
ng serve --help
ng build
l
ls
sudo pnpm i -g vite
sudo npm i -g vite
vite
ls
cd src
ls
cd ..
cd dist
ls
cd t/browser
ls
vite serve
vite serve --help
vite preview index.html
ls
vite preview index.html
s
ls
vite
ls
vite
vite --help
ls
brave index.html
vite
ng serve
ng build
vite preview
s
ls
vite previe
s
ls
vite preview index.htnl
vite preview index.html
ls
ng build
clear
ls
curl localhost:4173
vite preview
ls
cd images
vite preview
cd ..
vite
ng build --aot
ls
vite
git reset --hard
clear
ls
cd Downloads
ls
mv VictorMono.zip victor
ls
cd victor/
ls
cd ..
ls
cd iosevka/
l
sls
ls
unzip Iosevka.zip
ls
rm -rf Iosevka.zip
ls
cd .local/share/fonts
clear
pfetch
clear
fastfetch
ды
ls
ды
ls
rm -rf core.1460
ls
ды
ls
ды
ls
rm -rf 20240901_17h21m30s_grim.png
ls
ды
ls
mkdir .local/share/fonts
ls
cd Downloads/
ls
cd iosevka/
ls
rm -rf *.zip
ls
cp Io* ~/.local/share/fonts
fc-cache
fc-cache reload
ls
ды
cd .local
ls
cp share/fonts/ .
ls
cp share/fonts/ . -r
cd .config/kitty
ls
sudo pacman -S nerd-fonts
sudo pacman -S ttf-victor-mono-nerd
sudo pacman -S tff-iosevka-mono-nerd
sudo pacman -S tff-iosevka-nerd
sudo pacman -S ttf-iosevka-nerd
ls
cd .config/kitty
l
s
ls
kitty +list-fonts
clear
ls
workspace
ls
paru -S noto-fonts-cjk
paru -S  noto-fonts-cjk noto-fonts-emoji noto-fonts
clear
ls
ды
ls
cd dotfiles
ls
cd .local
ls
cp bin ~/.local
cp bin ~/.local -r
ls
cd .local
ls
cd bin
ls
nu config
~/.local/bin/tmux-sessionizer
cd .local/bin/
ls
chmod 777 tmux-sessionizer
ls
paru -S fzy
ls
s
ls
clear
ls
cd Documents
ls
paru -S fennel
fennel
git https://github.com/bakpakin/Fennel.git --depth 1
git --depth 1 
git --depth 1  https://github.com/bakpakin/Fennel.git
git clone https://github.com/bakpakin/Fennel.git
c Fennel/
cd Fennel/
ls
make -si
make install
sudo make install
git clone https://github.com/cmus-enjoyers/sneaky-cmup-10.git
lxappearence
tks
ls
v
wofi
tks
brave --disable-gpu-vsync --disable-frame-rate-limit
brave --args --disable-gpu-vsync --disable-frame-rate-limit
brave --help
man brave
sudo pacman -S man man-pages
man brave
brave --disable-gpu-vsync --disable-frame-rate-limit
fastfetch
sudo pacman -S syncthing
sudo os-prober
sudo blkid /dev/nvmen1p1
sudo blkid /dev/nvme0n1p0
sudo blkid /dev/nvme0n1p1
cd /etc/grub.d
ls
sudo chmod o+w 40_custom
open
edit
oepn ./40_custom
nvim 40_custom
sudo grub-mkconfig -o /boot/grub/grub.cfg
nvim /boot/grub/grub.cfg
cd .local/bin
ls
nvim browser-wofi
chmod 777 browser-wofi
ls
cd .config/hypr
v
ls
git checkout feature/TRA-13
ls
git reset --hard 
git checkout feature/TRA-13
clear
ls
v
gs
git pull origin develop --rebase
gs
git rebase --abort
ls
gs
git log
git reset --hard 59a9180e0690c9ac6393ddccb0b96b88775cd5c4
git pull origin develop --rebase
gs
git push -f
zig
ls
cd Documents
ls
cd sneaky-cmup-10/
ls
s
ls
sudo pacman -S zig
s
ls
cd zig
ls
cd cmup
zig build
zig build -Doptimize=ReleaseFast
ls
timeit ./zig-out/bin/zig --write
ng serve
cd src
l
ls
cd app
brightnessctl
ls
cd search
l
ls
cd components
ls
ng g c filter
disable touchpad
ls
cd ..
ls
cd services
ls
mkdir search
cd search
ng g c search
ng g s search
gs
g add -a
g add -A
g commit -m 'feat: add search servic'
git commit --amend
ls
gp
ls
cd dotfiles
;s
ls
cd .config
rm -rf nvim hypr nushell
cp ~/.config/{nvim, hypr, nushell} -r .
cp ~/.config/nvim . -r
gs
cp * -r ~/.config
exit
ls
config nu
clear
sudo dinitctl start bluetoothd; rfkill unblock all;
ls
sudo pacman -S ttf-iosevka-nerd
cd .local
ls
cd bion
ls
cd bin
ls
cd ..
s
ls
qmkl
qmk
clear
ls
cd fonts
ls
rm -rf *
rm -rfi *
ls
cd ..
ls
cd ..
cd Downloads/
ls
cd iosevka/
ls
cp * -r ~/.local/fonts
l
ls
cd ..
ls
cd victor/
cp * -r ~/.local/fonts
zmup --write
cd Music
ls
unzip VictorMono.zip
cp * -r ~/.local/fonts
fc-cache reload
ls
kitty +list-fonts
ды
ls
clear
ls
mkdir Documents
cd Documents
git clone https://github.com/cmus-enjoyers/sneaky-cmup-10.git https://github.com/vktrenokh/t
ls
cd https:/
ls
cd ..
ls
rm -rf https:/
ls
git clone https://github.com/cmus-enjoyers/sneaky-cmup-10.git 
git clone https://github.com/vktrenokh/t
nvim .gitconfig
ll
ls
ls
tks
v
cd zig/cmup
v
cd zig/cmup
v
ls
cd Sync
ls
cd ..
syncthing
killall syncthing
syncthign
ls
mkdir Music
ls
cd Music
ls
cd ..
ls
rm -rf Music
ls
clear
ls
syncthing
clear
ls
cd .config/kitty
v
clear
v
fastfetch
cd dotfiles
ls
cd .config
rm -rf nvim
cp ~/.config/nvim . -r
rm -rf nushell
